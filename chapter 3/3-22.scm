(define (make-queue)
	(make-queue2 '() '()))
	
(define (make-queue2 front-ptr rear-ptr)
    (define (front-queue)
		(car front-ptr))
	(define (empty-queue?) 
		(null? front-ptr))
	(define (insert-queue! item)
		(let ((new-pair (cons item '())))
					(cond ((empty-queue?) 
							(set! front-ptr new-pair) 
							(set! rear-ptr new-pair))
					(else
						(set-cdr! rear-ptr new-pair)
						(set! rear-ptr new-pair)))))
	(define (delete-queue!)
		(cond ((empty-queue?) (error "DELETE! called with an empty queue" queue))
			  (else (set! front-ptr (cdr front-ptr)))))
	(define (print-queue)
		(if (empty-queue?)
			'()
			front-ptr))
	(define (dispatch act)
		(cond ((eq? act 'front-queue)   front-queue)
			  ((eq? act 'empty-queue?)  empty-queue?)
			  ((eq? act 'insert-queue!) insert-queue!)
			  ((eq? act 'delete-queue!) delete-queue!)
			  ((eq? act 'print-queue) print-queue)
			  (else (error "QUEUE have no operation " act))))
	dispatch)
		
(define (front-queue queue)   		((queue 'front-queue)))
(define (empty-queue? queue)  		((queue 'empty-queue?)))
(define (insert-queue! queue item) 	((queue 'insert-queue!) item)) 
(define (delete-queue! queue) 		((queue 'delete-queue!)))
(define (print-queue queue) 		((queue 'print-queue)))
			
(define q1 (make-queue))
(print-queue q1)
(insert-queue! q1 'a)
(print-queue q1)
(insert-queue! q1 'b)
(front-queue q1)  
(print-queue q1)
(delete-queue! q1)
(print-queue q1)
(delete-queue! q1)
(print-queue q1)