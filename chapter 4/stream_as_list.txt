;;; M-Eval input:
(define (cons x y)
(lambda (m) (m x y)))

;;; M-Eval value:
ok

;;; M-Eval input:
(define (car z)
(z (lambda (p q) p)))

;;; M-Eval value:
ok

;;; M-Eval input:
(define (cdr z)
(z (lambda (p q) q)))

;;; M-Eval value:
ok

;;; M-Eval input:
(define (list-ref items n)
(if (= n 0)
(car items)
(list-ref (cdr items) (- n 1))))

;;; M-Eval value:
ok

;;; M-Eval input:
(define (map proc items)
(if (null? items)
'()
(cons (proc (car items))
(map proc (cdr items)))))

;;; M-Eval value:
ok

;;; M-Eval input:
(define (scale-list items factor)
(map (lambda (x) (* x factor))
items))

;;; M-Eval value:
ok

;;; M-Eval input:
(define (add-lists list1 list2)
(cond ((null? list1) list2)
((null? list2) list1)
(else (cons (+ (car list1) (car list2))
(add-lists (cdr list1) (cdr list2))))))

;;; M-Eval value:
ok

;;; M-Eval input:
(define ones (cons 1 ones))

;;; M-Eval value:
ok

;;; M-Eval input:
(define integers (cons 1 (add-lists ones integers)))

;;; M-Eval value:
ok

;;; M-Eval input:
(list-ref integers 17)

;;; M-Eval value:
18

;;; M-Eval input:

然后好奇的试验了一下原生的cons

结果如下
Language: R5RS
> (define ones (cons 1 ones))
. . ones: undefined;
 cannot reference undefined identifier
> 
Language: Pretty Big
> (define ones (cons 1 ones))
. . ones: undefined;
 cannot reference undefined identifier
> 

可见这两种语言的cons参数都是要application

Language: Lazy Racket
> (define ones (cons 1 ones))
> 
一切正常，可见他应该是delay的